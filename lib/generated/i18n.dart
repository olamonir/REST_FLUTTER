import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get about_us => "About Us";
  String get ac => "AC";
  String get book_the_car => "Book the Car";
  String get brand => "Brand";
  String get car_detail_1 => "Rental counter in terminal";
  String get car_detail_2 => "Helpful counter staff";
  String get car_detail_3 => "Well-maintained cars";
  String get car_detail_4 => "Most popular fuel policy";
  String get car_detail_5 => "Short queues";
  String get car_detail_6 => "Airport Charge";
  String get car_details => "Car Details";
  String get car_type => "Car Type";
  String get cars => "Cars";
  String get contact_us => "Contact Us";
  String get email => "Email";
  String get end_date_time => "Delivery date";
  String get error_try_again => "Error please try again";
  String get fill_field => "Please fill this field";
  String get forget_password => "Forget your password?";
  String get get_start => "Get Started";
  String get home => "Home";
  String get login => "Login";
  String get login_subtitle => "Car Hire – Search, Compare & Save";
  String get logout => "Logout";
  String get message => "Message";
  String get message_send_content => "Your message send successfully.";
  String get my_orders => "My Orders";
  String get name => "Name";
  String get no_cars => "No cars found!";
  String get no_orders => "No orders found!";
  String get ok => "OK";
  String get order_done => "Order Done";
  String get order_done_content => "Your order complete successfully. we will contact you soon.";
  String get password => "Password";
  String get per_day => "Per Day";
  String get phone => "Phone";
  String get please_select_date => "Please select from/to date";
  String get register => "Register";
  String get register_now => "Register Now";
  String get rent_type => "Rent Type";
  String get retry => "Retry";
  String get search => "Search";
  String get select_area => "Select Area";
  String get send => "Send";
  String get sign_in => "Sign In";
  String get sign_up => "Sign Up";
  String get start_date_time => "Receive Date";
  String get wrong_date => "Delivery date cannot be before Receive Date";
  String price_kd(String price) => "$price KD";
}

class $ar extends S {
  const $ar();

  @override
  TextDirection get textDirection => TextDirection.rtl;

  @override
  String get register_now => "التسجيل الآن";
  @override
  String get please_select_date => "قم باختيار تاريخ البدء والانتهاء.";
  @override
  String get book_the_car => "حجز السياره";
  @override
  String get car_type => "نوع السياره";
  @override
  String get end_date_time => "تاريخ تسليم السياره";
  @override
  String get password => "كلمة السر";
  @override
  String get logout => "الخروج";
  @override
  String get about_us => "عن التطبيق";
  @override
  String get no_cars => "لا يوجد سيارات!";
  @override
  String get brand => "ماركه";
  @override
  String get sign_in => "تسجيل الدخول";
  @override
  String get rent_type => "نوع الايجار";
  @override
  String get ac => "مكيف";
  @override
  String get sign_up => "الاشتراك";
  @override
  String get cars => "السيارات";
  @override
  String get phone => "الهاتف";
  @override
  String get order_done_content => "تم حجز السياره بنجاح ، سوف نتواصل معك قريبا.";
  @override
  String get my_orders => "طلباتي";
  @override
  String get name => "الأسم";
  @override
  String get send => "أرسال";
  @override
  String get select_area => "أختر المنطقه";
  @override
  String get message_send_content => "تم أرسال رسالتك بنجاح.";
  @override
  String get contact_us => "تواصل معنا";
  @override
  String get login => "دخول";
  @override
  String get search => "بحث";
  @override
  String get wrong_date => "يجب ان يكون تاريخ التسليم بعد تاريخ الاستلام";
  @override
  String get ok => "موافق";
  @override
  String get order_done => "تم الحجز";
  @override
  String get retry => "إعاده";
  @override
  String get email => "البريد";
  @override
  String get get_start => "البدء";
  @override
  String get fill_field => "قم بملئ هذه الخانه";
  @override
  String get login_subtitle => "تأجير سيارات - بحث ومقارنة وحفظ";
  @override
  String get car_detail_4 => "سياسة الوقود الأكثر شعبية";
  @override
  String get car_detail_3 => "صيانه جيده للسيارات";
  @override
  String get car_detail_6 => "رسوم المطار";
  @override
  String get car_detail_5 => "طوابير قصيرة";
  @override
  String get message => "الرساله";
  @override
  String get home => "الرئيسيه";
  @override
  String get error_try_again => "خطأ اعد المحاوله";
  @override
  String get car_details => "معلومات السياره";
  @override
  String get forget_password => "نسيت كلمة السر؟";
  @override
  String get car_detail_2 => "طاقم عمل لمساعدتك";
  @override
  String get car_detail_1 => "تأجير عداد في المحطة";
  @override
  String get no_orders => "لا يوجد طلبات!";
  @override
  String get start_date_time => "تاريخ أستلام السياره";
  @override
  String get per_day => "في اليوم";
  @override
  String get register => "التسجيل";
  @override
  String price_kd(String price) => "$price دينار";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("ar", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "ar":
          S.current = const $ar();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
